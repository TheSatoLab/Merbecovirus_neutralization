labels = scales::percent_format(scale = 1),
breaks = c(1:5)^2) +
# fix labels if needed: https://stackoverflow.com/a/60733863
scale_x_continuous(
labels = function(x) paste0(x, '\u00B0', "W")
) +
scale_y_continuous(
labels = function(x) paste0(x, '\u00B0', "N")
) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue")) +
labs(
title = paste(unique(df$date), indicator_info$indicator),
fill = NULL,
caption = paste("Source:", indicator_info$source_org)
)
##-- Create bounding box --
# Choose manually the region to plot with Open Street Map
# https://www.openstreetmap.org/export
window_coord <- st_sfc(
st_point(c(-18, 32.5)), #left, bottom
st_point(c(40.4, 72.3)), #right, top
crs = 4326 #the EPSG identifier if WGS84
)
window_coord_sf <- window_coord %>%
st_transform(crs = target_crs) %>%
st_coordinates() # retrieve coordinates
## -- Plot European countries only --
world_moll %>%
left_join(df, by = c("iso_a3" = "iso3c")) %>%
filter(continent == "Europe") %>%
ggplot() +
geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +
#window of the map
coord_sf(
xlim = window_coord_sf[, "X"],
ylim = window_coord_sf[, "Y"],
expand = FALSE
) +
scale_fill_viridis_c(
labels = scales::percent_format(scale = 1),
) +
scale_x_continuous(
labels = function(x) paste0(x, '\u00B0', "W")
) +
scale_y_continuous(
labels = function(x) paste0(x, '\u00B0', "N")
) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue")) +
labs(
title = indicator_info$indicator,
fill = NULL,
caption = paste("Source:", indicator_info$source_org)
)
library(ggplot2)
library(dplyr)
library(maps)
world.map <- map_data("world") %>%
select(lon = long, lat, group, id = subregion)
head(world.map)
ggplot(world.map, aes(lon, lat)) +
geom_point(size = .25, show.legend = FALSE) +
coord_quickmap()
ggplot(world.map, aes(lon, lat, group = group)) +
geom_polygon(fill = "white", colour = "grey50") +
coord_quickmap()
map("world", "Japan")
map.cities(country = "Japan", capitals = 1)
library(tidyverse)
library(rnaturalearth)
library(sf)
library(wbstats)
library(dplyr)
#Download world data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica")
target_crs <- "+proj=moll"
world_moll <- world %>%
st_transform(crs = target_crs)
ind <- "SL.UEM.TOTL.ZS"
indicator_info <- wb_cachelist$indicators %>%
filter(indicator_id == ind)
indicator_info$indicator
df <- wb_data(ind, start_date = 2020) %>%
filter(date == 2020)
glimpse (df)
df %>%
ggplot() +
geom_histogram(aes(SL.UEM.TOTL.ZS)) +
theme_minimal() +
scale_x_sqrt()
#-- Plot world map --
world_moll %>%
left_join(df, by = c("iso_a3" = "iso3c")) %>%
ggplot() +
geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +
scale_fill_viridis_c(
trans = "sqrt",
labels = scales::percent_format(scale = 1),
breaks = c(1:5)^2) +
# fix labels if needed: https://stackoverflow.com/a/60733863
scale_x_continuous(
labels = function(x) paste0(x, '\u00B0', "W")
) +
scale_y_continuous(
labels = function(x) paste0(x, '\u00B0', "N")
) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue")) +
labs(
title = paste(unique(df$date), indicator_info$indicator),
fill = NULL,
caption = paste("Source:", indicator_info$source_org)
)
View(world)
# Install and load the required packages
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
library(leaflet)
# Create a basic map
m <- leaflet() %>%
setView(lng = YOUR_CENTER_LONGITUDE, lat = YOUR_CENTER_LATITUDE, zoom = YOUR_INITIAL_ZOOM)
library(leaflet)
# Create a basic map centered around the Philippines
m <- leaflet() %>%
setView(lng = 121, lat = 13, zoom = 6)  # Centered around the Philippines
# Add a marker for Manila, Philippines
m <- m %>% addMarkers(lng = 120.9822, lat = 14.5995, popup = "Manila, Philippines")
# Create a zoomed-in map focused on Manila
m_zoomed <- m %>% setView(lng = 120.9822, lat = 14.5995, zoom = 12)  # Zoomed in on Manila
# Display the maps
print(m)
print(m_zoomed)
install.packages("leaflet")
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
# Create a basic map centered around the Philippines
m <- leaflet() %>%
setView(lng = 121, lat = 13, zoom = 6)  # Centered around the Philippines
# Add a marker for Manila, Philippines
m <- m %>% addMarkers(lng = 120.9822, lat = 14.5995, popup = "Manila, Philippines")
# Create a zoomed-in map focused on Manila
m_zoomed <- m %>% setView(lng = 120.9822, lat = 14.5995, zoom = 12)  # Zoomed in on Manila
# Display the maps
print(m)
print(m_zoomed)
# Download world data
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antartica")
library(treeio)
library(data.table)
library(ggtree)
library(ggplot2)
library(dplyr)
library(readr)
library(magrittr)
nwk <- system.file("extdata/NL63", "NL63.nwk", package = "treeio")
tree <- read.tree(nwk)
tree$tip.label <- gsub("'", "", tree$tip.label)
tip.labels <- as.data.frame(tree$tip.label) %>% set_colnames("tip.labels")
tip.labels <- tip.labels %>%
mutate(classification = ifelse(substr(tip.labels, 1, 2) == "20", "Yamagata", "NCBI"))
groupList <- as.list(NULL)
for (i in 1:nrow(tip.labels)) {
tip.name <- as.character(tip.labels[i, ]$tip.labels)
tip.class <- as.character(tip.labels[i, ]$classification)
if (!tip.class %in% names(groupList)) {
groupList[[tip.class]] <- as.vector(NULL)
}
groupList[[tip.class]] <- c(groupList[[tip.class]], tip.name)
}
tree <- groupOTU(tree, groupList)
color.matching <- c(
"Yamagata" = "#063970",
"NCBI" = "grey"
)
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 0.1, "NCBI" = 0.1))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 1, "NCBI" = 0.1))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 5, "NCBI" = 0.1))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 3, "NCBI" = 0.1))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 2, "NCBI" = 0.1))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
g <- ggtree(tree) + geom_tippoint(aes(color = group, shape = group, size = group)) +
scale_color_manual(values = color.matching) +
scale_shape_manual(values = c("Yamagata" = 8, "NCBI" = 5)) +
scale_size_manual(values = c("Yamagata" = 2, "NCBI" = 2))
n.seq <- length(tree$tip.label)
g <- g + ylim(0,n.seq + 50)+ geom_treescale(fontsize=5,x=0,y=n.seq,offset=10)
g
setwd("/Desktop/Dissertation/phylogenetic-analysis/projects/Setracovirus/NL63-adaptive-evolution/240226-Yamagata-only")
#################Changing-the-names-of-the-fasta-file-to-desired-names#######################
fasta_text <- readLines("Yamagata.sam.fasta.hyphen.filtered.trimmed.fasta") #should be trimmed
reference <- read.csv("names.csv", header = FALSE, stringsAsFactors = FALSE)
setwd("/Desktop/Dissertation/phylogenetic-analysis/projects/Setracovirus/NL63-adaptive-evolution/240226-Yamagata-only")
install.packages(c("boot", "callr", "circlize", "DBI", "DT", "ggdendro", "ggplot2", "igraph", "loo", "lwgeom", "magick", "mclust", "parallelly", "RcppEnsmallen", "rvest", "segmented", "shape", "survival", "TeachingDemos", "usethis"))
# Example data frames
df_names <- data.frame(
name = c("John", "Alice", "Bob", "Emma"),
stringsAsFactors = FALSE
)
View(df_names)
df_info <- data.frame(
name = c("John", "Alice", "Bob", "Emma"),
age = c(25, 30, 35, 40),
city = c("New York", "Los Angeles", "Chicago", "Houston"),
stringsAsFactors = FALSE
)
View(df_info)
# Merge the two data frames based on the "name" column
merged_df <- merge(df_names, df_info, by = "name", all.x = TRUE)
View(merged_df)
# Example data frames
df_names <- data.frame(
name = c("John", "Alice", "Bob", "Emma"),
clade = c("A", "B", "C", "D"),
stringsAsFactors = FALSE
)
df_info <- data.frame(
name = c("John", "Alice", "Bob", "Emma"),
other = c(1, 2, 3, 4),
sequence = c("ACGT", "TGCA", "CGTA", "ATGC"),
date = c("2022-01-01", "2022-02-01", "2022-03-01", "2022-04-01"),
stringsAsFactors = FALSE
)
View(df_names)
# Merge the two data frames based on the "name" column
merged_df <- merge(df_names, df_info, by = "name", all.x = TRUE)
View(merged_df)
# Select the columns you need
merged_df <- merged_df[, c("name", "clade", "date")]
View(merged_df)
install.packages(c("curl", "data.table", "ggsci", "parallelly", "RcppArmadillo", "RcppEigen", "rgl", "rmarkdown", "rstan", "StanHeaders"))
devtools::install_github("AndreaCirilloAC/updateR")
install.packages(c("boot", "digest", "Hmisc", "tidyselect"))
install.packages(c("digest", "Hmisc", "tidyselect"))
install.packages(c("bslib", "callr", "cols4all", "dbplyr", "digest", "future", "ggsci", "Hmisc", "htmltools", "httpuv", "igraph", "lattice", "leaflet", "pkgbuild", "processx", "ragg", "remotes", "rstudioapi", "sass", "sf", "shiny", "tidyselect", "tinytex", "xfun"))
install.packages(c("ape", "brio", "bslib", "codetools", "crul", "data.table", "DT", "fs", "ggplot2", "gh", "gtable", "htmltools", "httr2", "knitr", "lme4", "matrixStats", "mclust", "munsell", "openssl", "pkgdown", "promises", "RcppArmadillo", "RSQLite", "segmented", "seriation", "shiny", "sp", "StanHeaders", "stars", "survival", "testthat", "TreeSearch", "WikipediR", "xopen"))
install.packages("knitr")
metadata.ph.combined <- fread('data/Rep1/philippines.combined.tsv')
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/mersrcov/mink_HKU5/Jarel/run/241007_clockOR2/")
install.packages("doBy")
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/mersrcov/mink_HKU5/Jarel/run/241007_clockOR2/")
library(xml2)
library(dplyr)
library(stringr)
library(openxlsx)
library(lubridate)
xml_file_path <- "sequence.gbc.xml"
xml_data <- read_xml(xml_file_path)
source_features <- xml_find_all(xml_data, "//INSDFeature[INSDFeature_key = 'source']")
install.packages(c("bit", "cluster", "cpp11", "data.table", "ggfun", "Hmisc", "igraph", "lubridate", "parallelly", "RcppArmadillo", "RcppEnsmallen", "RSQLite", "seriation", "terra", "textshaping"))
library(treeio)
library(data.table)
library(ggtree)
library(ggplot2)
library(dplyr)
library(ape)
library(stats)
library (phytools)
#/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/treeio/
nxs <- system.file("extdata/HKU5", "spike_hku5only.renamed.cds.linsi.RBD.loopannot.nxs", package = "treeio")
tree1 <- read.tree(nxs)
#/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/treeio/
nwk <- system.file("extdata/HKU5", "spike_hku5only.renamed.cds.linsi.RBD.loopannot.nwk", package = "treeio")
library(treeio)
library(ggtree)
library(xlsx)
library(dplyr)
library(xml2)
library(dplyr)
library(stringr)
library(openxlsx)
library(lubridate)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree/")
xml_file_path <- "final/sequence.gbc.xml"
xml_data <- read_xml(xml_file_path)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree/")
getwd()
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree/")
rm(xml_file_path)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree/")
library(treeio)
library(ggtree)
library(xlsx)
library(dplyr)
library(xml2)
library(dplyr)
library(stringr)
library(openxlsx)
library(lubridate)
library(readr)
library(data.table)
library(ggplot2)
library(ape)
library(stats)
library(phytools)
library(phangorn)
library(Biostrings)
library(ggtree)
library(treeio)
library(ggplot2)
library(dplyr)
library(phylotools)
library(Biostrings)
library(stringr)
library(openxlsx)
library(ape)
library(tidyr)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree-Lin/Merbecovirus_neutralization/metadata/sequence-alignment/")
xml_file_path <- "sequence.gbc.xml"
xml_data <- read_xml(xml_file_path)
source_features <- xml_find_all(xml_data, "//INSDFeature[INSDFeature_key = 'source']")
definition_features <- xml_find_all(xml_data, "//INSDSeq[INSDSeq_definition]")
length_features <- xml_find_all(xml_data, "//INSDSeq[INSDSeq_length]")
accession_names <- data.frame(matrix(nrow = 699, ncol = 13))
colnames(accession_names) <- c("Subgenus", "Genus", "Family", "Accession-number", "Length", "Definition", "Organism", "strain", "isolate-name", "collection-date", "Country", "Host", "Note")
accession_names$Subgenus[1:699] <- "Sarbecovirus"
accession_names$Genus[1:699] <- "Betacoronavirus"
accession_names$Family[1:699] <- "Coronaviridae"
for (i in 1:length(source_features)) {
definition <- xml_text(xml_find_first(definition_features[i], "./INSDSeq_definition"))
length <- xml_text(xml_find_first(length_features[i], ".//INSDSeq_length"))
accession <- xml_text(xml_find_first(source_features[i], ".//INSDInterval_accession"))
organism <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'organism']/INSDQualifier_value"))
isolate_name <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'isolate']/INSDQualifier_value"))
date <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'collection_date']/INSDQualifier_value"))
country <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'geo_loc_name']/INSDQualifier_value"))
host <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'host']/INSDQualifier_value"))
strain <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'strain']/INSDQualifier_value"))
note<- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'note']/INSDQualifier_value"))
accession_names$Definition[i] <- definition
accession_names$`Accession-number`[i] <- accession
accession_names$Length[i] <- length
accession_names$Organism[i] <- organism
accession_names$strain[i] <- strain
accession_names$`isolate-name`[i] <- isolate_name
accession_names$`collection-date`[i] <- date
accession_names$Country[i] <- country
accession_names$Host[i] <- host
accession_names$Note[i] <- note
cat("Definition:", definition, "\n")
cat("Accession:", accession, "\n")
cat("Length:", length, "\n")
cat("Organism:", organism, "\n")
cat("Strain:", strain, "\n")
cat("Isolate Name:", isolate_name, "\n")
cat("Collection Date:", date, "\n")
cat("Country:", country, "\n")
cat("Host:", host, "\n")
cat("Note:", note, "\n")
cat("\n")
}
######original
filename <- "250114_final-metadata_69seqs.xlsx"
write.xlsx(accession_names, file = filename, rowNames = TRUE)
cat("Data frame exported successfully to", filename)
debugSource("~/Desktop/programs/R/MERS-Lin.R", echo=TRUE)
######original
filename <- "250114_final-metadata_699seqs.xlsx"
######original
filename <- "250114_final-metadata_699seqs.xlsx"
write.xlsx(accession_names, file = filename, rowNames = TRUE)
cat("Data frame exported successfully to", filename)
accession_names <- data.frame(matrix(nrow = 699, ncol = 13))
colnames(accession_names) <- c("Subgenus", "Genus", "Family", "Accession-number", "Length", "Definition", "Organism", "strain", "isolate-name", "collection-date", "Country", "Host", "Note")
accession_names$Subgenus[1:699] <- "Merbecovirus"
accession_names$Genus[1:699] <- "Betacoronavirus"
accession_names$Family[1:699] <- "Coronaviridae"
for (i in 1:length(source_features)) {
definition <- xml_text(xml_find_first(definition_features[i], "./INSDSeq_definition"))
length <- xml_text(xml_find_first(length_features[i], ".//INSDSeq_length"))
accession <- xml_text(xml_find_first(source_features[i], ".//INSDInterval_accession"))
organism <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'organism']/INSDQualifier_value"))
isolate_name <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'isolate']/INSDQualifier_value"))
date <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'collection_date']/INSDQualifier_value"))
country <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'geo_loc_name']/INSDQualifier_value"))
host <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'host']/INSDQualifier_value"))
strain <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'strain']/INSDQualifier_value"))
note<- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'note']/INSDQualifier_value"))
accession_names$Definition[i] <- definition
accession_names$`Accession-number`[i] <- accession
accession_names$Length[i] <- length
accession_names$Organism[i] <- organism
accession_names$strain[i] <- strain
accession_names$`isolate-name`[i] <- isolate_name
accession_names$`collection-date`[i] <- date
accession_names$Country[i] <- country
accession_names$Host[i] <- host
accession_names$Note[i] <- note
cat("Definition:", definition, "\n")
cat("Accession:", accession, "\n")
cat("Length:", length, "\n")
cat("Organism:", organism, "\n")
cat("Strain:", strain, "\n")
cat("Isolate Name:", isolate_name, "\n")
cat("Collection Date:", date, "\n")
cat("Country:", country, "\n")
cat("Host:", host, "\n")
cat("Note:", note, "\n")
cat("\n")
}
######original
filename <- "250114_final-metadata_699seqs.xlsx"
write.xlsx(accession_names, file = filename, rowNames = TRUE)
cat("Data frame exported successfully to", filename)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree-Lin/Merbecovirus_neutralization/metadata/sequence-alignment/seq-alignment-B-only/")
xml_file_path <- "sequence.gbc.xml"
xml_data <- read_xml(xml_file_path)
source_features <- xml_find_all(xml_data, "//INSDFeature[INSDFeature_key = 'source']")
definition_features <- xml_find_all(xml_data, "//INSDSeq[INSDSeq_definition]")
length_features <- xml_find_all(xml_data, "//INSDSeq[INSDSeq_length]")
accession_names <- data.frame(matrix(nrow = 578, ncol = 13))
colnames(accession_names) <- c("Subgenus", "Genus", "Family", "Accession-number", "Length", "Definition", "Organism", "strain", "isolate-name", "collection-date", "Country", "Host", "Note")
accession_names$Subgenus[1:578] <- "Merbecovirus"
accession_names$Genus[1:578] <- "Betacoronavirus"
accession_names$Family[1:578] <- "Coronaviridae"
for (i in 1:length(source_features)) {
definition <- xml_text(xml_find_first(definition_features[i], "./INSDSeq_definition"))
length <- xml_text(xml_find_first(length_features[i], ".//INSDSeq_length"))
accession <- xml_text(xml_find_first(source_features[i], ".//INSDInterval_accession"))
organism <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'organism']/INSDQualifier_value"))
isolate_name <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'isolate']/INSDQualifier_value"))
date <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'collection_date']/INSDQualifier_value"))
country <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'geo_loc_name']/INSDQualifier_value"))
host <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'host']/INSDQualifier_value"))
strain <- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'strain']/INSDQualifier_value"))
note<- xml_text(xml_find_first(source_features[i], ".//INSDQualifier[INSDQualifier_name = 'note']/INSDQualifier_value"))
accession_names$Definition[i] <- definition
accession_names$`Accession-number`[i] <- accession
accession_names$Length[i] <- length
accession_names$Organism[i] <- organism
accession_names$strain[i] <- strain
accession_names$`isolate-name`[i] <- isolate_name
accession_names$`collection-date`[i] <- date
accession_names$Country[i] <- country
accession_names$Host[i] <- host
accession_names$Note[i] <- note
cat("Definition:", definition, "\n")
cat("Accession:", accession, "\n")
cat("Length:", length, "\n")
cat("Organism:", organism, "\n")
cat("Strain:", strain, "\n")
cat("Isolate Name:", isolate_name, "\n")
cat("Collection Date:", date, "\n")
cat("Country:", country, "\n")
cat("Host:", host, "\n")
cat("Note:", note, "\n")
cat("\n")
}
######original
filename <- "250114_final-metadata_578-B-only.seqs.xlsx"
write.xlsx(accession_names, file = filename, rowNames = TRUE)
cat("Data frame exported successfully to", filename)
setwd("/Users/JarelElginTolentino/Desktop/Dissertation/phylogenetic-analysis/projects/Merbecovirus/240830_MERSr-phylotree-Lin/Merbecovirus_neutralization/run/phylogenetic-analysis/")
###############Changing-the-names-of-the-fasta-file-to-accession-numbers (Maintaining the accession numbers only)################
fasta_text <- readLines("sequence.output.cleaned.fasta")
for (i in seq_along(fasta_text)) {
line <- fasta_text[i]
if (startsWith(line, ">")) {
accession <- sub("^>(\\S+).*", "\\1", line)
fasta_text[i] <- paste0(">", accession)
}
}
writeLines(fasta_text, "sequence.output.cleaned.renamed.fasta")
#################Changing-the-names-of-the-fasta-file-to-desired-names#######################
fasta_text <- readLines("sequence.output.cleaned.renamed.fasta") #should be trimmed
reference <- read.csv("names.csv", header = FALSE, stringsAsFactors = FALSE)
new_names <- setNames(reference$V2, reference$V1)
for (i in seq_along(fasta_text)) {
line <- fasta_text[i]
if (startsWith(line, ">")) {
accession <- sub("^>\\s*", "", line)
if (accession %in% names(new_names)) {
fasta_text[i] <- paste0(">", new_names[accession])
}
}
}
writeLines(fasta_text, "sequence.output.cleaned.renamed.official.fasta")
